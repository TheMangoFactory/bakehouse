{"name":"Bakehouse","tagline":"Streamlines web pre-processors for Spring resources","body":"### Bakehouse - cooks up your HTML resources for you.\r\nBakehouse is a framework for moving pre-processing of web artifacts to the server.\r\n\r\nIn a typical web project these days, you're likely to have a bunch of tasks that run on your artifacts.\r\n\r\nEg:\r\n\r\n * [Less for your CSS](http://lesscss.org/)\r\n * [Concatenate and minify your Javascript](https://developers.google.com/closure/compiler/)\r\n * Maybe even use some [Typescript](http://www.typescriptlang.org/) or [CoffeeScript](http://coffeescript.org/), which needs to be compiled\r\n\r\nHowever, the type of processing you want to apply often varies between Production and Development environments.  (Eg., non-minified code in dev, serve from a CDN in prod).\r\n\r\nBakehouse uses Spring's `@Configuration @Profile`'s to allow you to specify different deployment configs at runtime.\r\n\r\nFor example:\r\n\r\n    <%@ taglib prefix=\"bakehouse\" uri=\"http://www.mangofactory.com/bakehouse\" %>\r\n\t<head>\r\n\t\t<bakehouse:resource src=\"angular.js\" cdn=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.0.3/angular.min.js\"/>\r\n\t\t<bakehouse:resources configuration=\"javascript\" type=\"text/javascript\">\r\n\t\t\t<bakehouse:resource src=\"file1.js\"/>\r\n\t\t\t<bakehouse:resource src=\"file2.js\"/>\r\n\t\t</bakehouse:resources>\r\n\t\t<bakehouse:resources configuration=\"typescript\" type=\"text/javascript\">\r\n\t\t\t<bakehouse:resource src=\"typescript.ts\"/>\r\n\t\t</bakehouse:resources>\r\n\t</head>\r\n\r\nWith our resources wrapped in `<bakehouse:... />` tags, we can define multiple configurations depending on the environment we're running in.\r\n\r\nFor example -- in production:\r\n\r\n\t@Configuration\r\n\t@Profile(\"production\")\r\n\tpublic class ExampleBakehouseConfig implements BakehouseConfigProvider {\r\n\t\r\n\t\t@Override @Bean\r\n\t\tpublic BakehouseConfig build(BakehouseConfigBuilder builder) {\r\n\t\t\treturn builder\r\n\t\t\t\t.process(\"javascript\").serveAsSingleFile(\"AppCode.js\")\r\n\t\t\t\t.process(\"typescript\").with(new TypescriptProcessor(\"TypescriptCode.js\"))\r\n\t\t\t\t.serveResourcesFromCdn()\r\n\t\t\t\t.build();\r\n\t\t}\r\n\t}\r\n\r\nThis specifies:\r\n * Process the `javascript` group, concatenating into a single file, called `AppCode.js`\r\n * Process the `typescript` group, compiling the typescript into a single file called `TypescriptCode.js`\r\n * Download any resources with `cdn` addresses from their relative cdn's (eg., the `angularjs` resource)\r\n\r\nAlternatively, in Dev ---\r\n\r\n\t@Configuration\r\n\t@Profile(\"development\")\r\n\tpublic class ExampleBakehouseConfig implements BakehouseConfigProvider {\r\n\t\r\n\t\t@Override @Bean\r\n\t\tpublic BakehouseConfig build(BakehouseConfigBuilder builder) {\r\n\t\t\treturn builder\r\n\t\t\t\t.process(\"typescript\").with(new TypescriptProcessor(\"TypescriptCode.js\"))\r\n\t\t\t\t.build();\r\n\t\t}\r\n\t}\r\n\r\nHere:\r\n * `javascript` resources aren't processed, so will be served 'as-is`\r\n * Process the `typescript` group, compiling the typescript into a single file called `TypescriptCode.js`\r\n * CDN resources are ignored, so we'll be serving the local non-minified versions.\r\n\r\n### Project state\r\nThis is a POC project.  You're welcome to grab the code and play around with it (the above examples all work), but I'm not committed to actively working on the project unless there's demand.\r\n\r\nRegister your interest in seeing this get expanded by either [starring the project](https://github.com/themangofactory/bakehouse) or [leave a comment showing you're interested](https://github.com/themangofactory/bakehouse/issues/4).\r\n\r\nAlternatively, have a play, raise some issues, and submit some pull requests with enhancements.","google":"UA-37456009-1","note":"Don't delete this file! It's used internally to help with page regeneration."}